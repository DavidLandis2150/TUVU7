[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Visualization of Movement Data",
    "section": "",
    "text": "This website is to provide users with example codes on how to visualize flight patterns. The codes provided were adapted from the Animove website. To learn more about Animove click here to visit their webpage. For any question about the codes provided please email the website creator David Landis at delandis@cpp.edu."
  },
  {
    "objectID": "index.html#what-is-in-this-document",
    "href": "index.html#what-is-in-this-document",
    "title": "Visualization of Movement Data",
    "section": "What is in this Document",
    "text": "What is in this Document\n\nInitial Setup\n\nLoad Packages\nSet Working Directory and Upload Documents\nConvert to POSIXct\nFilter Data\nCategorizing Migration Patterns\nConvert to move\n\nInitial Map Visualization\n\nPlot coordinates\nPlot with Base Maps\n\nFirst Time Passage (FPT)\n\nFPT with increasing Radii\nFPT in Relation to Time\n\nCircular Visuals\n\nCreating Azimuth\nDirection of Travel\nSpeed in Relation to Direction\nDetailed Migration Map\n\nWork With Altitude\n\nMutate Data to Fit Elevatr\nDownload elevatr data\nCalculate Elevation Above Ground Level\nApply Filters\nCreate ggplot Visuals"
  },
  {
    "objectID": "index.html#initial-set-up",
    "href": "index.html#initial-set-up",
    "title": "Visualization of Movement Data",
    "section": "Initial Set Up",
    "text": "Initial Set Up\n\nLoad Packages\nClick on the following packages to learn more about their functions.\n\nmove\nscales\nsf\ntidyverse\nlubridate\nmapdata\nadehabitatLT\nmoveVis\nSDLfilter\n\n\nlibrary(move)\n\nLoading required package: geosphere\n\n\nLoading required package: sp\n\n\nLoading required package: raster\n\n\nLoading required package: rgdal\n\n\nPlease note that rgdal will be retired during 2023,\nplan transition to sf/stars/terra functions using GDAL and PROJ\nat your earliest convenience.\nSee https://r-spatial.org/r/2022/04/12/evolution.html and https://github.com/r-spatial/evolution\nrgdal: version: 1.6-5, (SVN revision 1199)\nGeospatial Data Abstraction Library extensions to R successfully loaded\nLoaded GDAL runtime: GDAL 3.5.3, released 2022/10/21\nPath to GDAL shared files: /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library/rgdal/gdal\n GDAL does not use iconv for recoding strings.\nGDAL binary built with GEOS: TRUE \nLoaded PROJ runtime: Rel. 9.1.0, September 1st, 2022, [PJ_VERSION: 910]\nPath to PROJ shared files: /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library/rgdal/proj\nPROJ CDN enabled: FALSE\nLinking to sp version:1.6-0\nTo mute warnings of possible GDAL/OSR exportToProj4() degradation,\nuse options(\"rgdal_show_exportToProj4_warnings\"=\"none\") before loading sp or rgdal.\n\nlibrary(scales)\nlibrary(sf)\n\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2\n──\n\n\n✔ ggplot2 3.4.1     ✔ purrr   1.0.1\n✔ tibble  3.2.0     ✔ dplyr   1.1.0\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.3     ✔ forcats 0.5.2\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ readr::col_factor() masks scales::col_factor()\n✖ purrr::discard()    masks scales::discard()\n✖ tidyr::extract()    masks raster::extract()\n✖ dplyr::filter()     masks stats::filter()\n✖ dplyr::lag()        masks stats::lag()\n✖ dplyr::select()     masks raster::select()\n\nlibrary(lubridate)\n\n\nAttaching package: 'lubridate'\n\nThe following objects are masked from 'package:raster':\n\n    intersect, union\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\nlibrary(mapdata)\n\nLoading required package: maps\n\nAttaching package: 'maps'\n\nThe following object is masked from 'package:purrr':\n\n    map\n\nlibrary(adehabitatLT)\n\nLoading required package: ade4\nLoading required package: adehabitatMA\nRegistered S3 methods overwritten by 'adehabitatMA':\n  method                       from\n  print.SpatialPixelsDataFrame sp  \n  print.SpatialPixels          sp  \n\nAttaching package: 'adehabitatMA'\n\nThe following object is masked from 'package:raster':\n\n    buffer\n\nLoading required package: CircStats\nLoading required package: MASS\n\nAttaching package: 'MASS'\n\nThe following object is masked from 'package:dplyr':\n\n    select\n\nThe following objects are masked from 'package:raster':\n\n    area, select\n\nLoading required package: boot\n\nAttaching package: 'adehabitatLT'\n\nThe following object is masked from 'package:dplyr':\n\n    id\n\nThe following object is masked from 'package:move':\n\n    burst\n\nlibrary(moveVis)\n\nDo you need help with moveVis? Have a look at the docs on our web page:\nhttp://movevis.org/\n\nlibrary(SDLfilter)\nlibrary(elevatr)\n\n\n\nSet Working Directory and Read in Data\n\nWorking directories are needed to be able to open data files that are in a different folder from your code.\n\n\n#set Working Directory\nsetwd(\"/Users/davidlandis/Desktop/School/Data\")\n\n#read in data\ntuvu_7783 <- read.csv(\"3.29.21-3.31.21_7783.csv\")\n\n#remove unwanted columns from table\ntuvu_7783<-tuvu_7783[,-17]\ntuvu_7783<-tuvu_7783[,-18]\n\n\n\nConvert to POSIXct\n\nall the packages we will be working with require that time be presented in a POSIXct format.\n\n\n#Convert to POSIXct\ntuvu_7783$GPS_YYYY.MM.DD_HH.MM.SS <- as.POSIXct(tuvu_7783$GPS_YYYY.MM.DD_HH.MM.SS, \n                                                tz = \"UTC\",\n                                                format = \"%Y-%m-%d %H:%M:%OS\")\n\n\n\nFilter Data by Speed\n\nGPS tracking devices are not perfect and occasionally obtain inaccurate data.\nWe use a speed/velocity filter to remove biologically implausible data\nAdditionally GPS locators will occasionally upload points that are located at 0 lat and 0 long. we will also filter to remove those points.\n\n\n#rename columns for SDL filter to be able to read them\ntuvu_7783<-tuvu_7783 |> \n  rename(qi=fix, \n         DateTime=GPS_YYYY.MM.DD_HH.MM.SS, \n         id=serial) |> \n  ddfilter(vmax = 50, \n           vmaxlp = 30, \n           qi = 3, \n           ia = 90, \n           method = 1) |> \n  mutate(lat = na_if(lat, 0))\n\n\nddfilter_speed removed 267 of 51967 locations\nddfilter_loop removed 449 of 51700 locations\n\nInput data: 51967 locations\nFiltered data: 51251 locations\nddfilter removed 716 locations (1.38% of original data)\n\n#remove rows with NA from our data set\ntuvu_7783<-na.omit(tuvu_7783)\n\n\n\nCategorizing Migration patterns\n\nTo visualize our birds trends during different seasons we need to categorize the data by months.\n\n\n#convert days to julian for better categorization \ntuvu_7783$julian <- yday(tuvu_7783$DateTime)               \n\n#the seasons have been manually seperated by dates specific to tuvu_7783\ntuvu_7783$groups<-cut(tuvu_7783$julian, breaks = c(0,72,103,274,289,365), labels = c(\"Wintering\", \"North migration\", \"Breeding\", \"South Migration\", \"Wintering\"))\n\n\n\nConvert to move\n\nTo use the move package our data needs to be presented in a move format.\n\n\n#convert to Data.frame\nmove_tuvu_7783<- methods::as(tuvu_7783, \n                             \"data.frame\")\n\n#convert to move\nmove_tuvu_7783 <- df2move(move_tuvu_7783, \n                          proj = \"+proj=longlat +datum=WGS84 +no_defs\", \n                          time = \"DateTime\", \n                          x = \"lon\", \n                          y = \"lat\", \n                          track_id = \"id\",\n                          data = NULL )"
  },
  {
    "objectID": "index.html#initial-visualizations",
    "href": "index.html#initial-visualizations",
    "title": "Visualization of Movement Data",
    "section": "Initial Visualizations",
    "text": "Initial Visualizations\n\nPlot coordinates\n\nQuick Initial visualization of data point to visualize any out liers.\n\n\n#Create an initial simple plot\nplot(move_tuvu_7783, \n     main=\"TUVU_7783 Movement\")\n\n\n\nplot(move_tuvu_7783, \n     main=\"TUVU_7783 Movement\",\n     xlab=\"Longitude\", \n     ylab=\"Latitude\",\n     type=\"b\",\n     pch=16, \n     cex=0.5)\n\n\n\n\n\n\nPlot with Base Maps\n\nThe data can be plotted with a base map to get a better grasp of location.\n\n\n#load packages needed\nlibrary(\"ggmap\")\n\nℹ Google's Terms of Service: \u001b]8;;https://mapsplatform.google.com\u0007<https://mapsplatform.google.com>\u001b]8;;\u0007\nℹ Please cite ggmap if you use it! Use `citation(\"ggmap\")` for details.\n\nlibrary(\"mapproj\")\n\n#plot basic base map\nmap('worldHires',\n    main=\"TUVU_7783 Movement\",\n    xlim = move_tuvu_7783@bbox[1, ]+c(-5,5), \n    ylim = move_tuvu_7783@bbox[2, ]+c(-5,5),\n    col=\"grey\", fill=T)\nlines(move_tuvu_7783, \n      col=\"firebrick\", \n      lwd=1.5)\n\n\n\n#change the magnification of the graph for better visualizaiton\n(e<-bbox(extent(move_tuvu_7783)*1.1))\n\n          min        max\ns1 -122.15836 -104.17735\ns2   19.07046   39.61611\n\n#create map\nmap('worldHires', \n    main=\"TUVU_7783 Movement\",\n    xlim = e[1, ], \n    ylim = e[2, ])\nlines(move_tuvu_7783, \n      color=\"firebrick\", \n      lwd=1.5)\n\nWarning in plot.xy(xy.coords(x, y), type = type, ...): \"color\" is not a\ngraphical parameter\n\n\n\n\n#obtain map from online source\nm <- get_map(e, \n             zoom=7, \n             source=\"stamen\",\n             maptype=\"terrain\")\n\nℹ Map tiles by Stamen Design, under CC BY 3.0. Data by OpenStreetMap, under ODbL.\nℹ 70 tiles needed, this may take a while (try a smaller zoom?)\n\n# plot the map and add the locations separated by individual id\nggmap(m)+\ngeom_path(data=tuvu_7783, \n          aes(x=lon, y=lat))+\n  ggtitle(\"TUVU_7783 Movement\")"
  },
  {
    "objectID": "index.html#first-time-passage",
    "href": "index.html#first-time-passage",
    "title": "Visualization of Movement Data",
    "section": "First Time Passage",
    "text": "First Time Passage\n\nFTP with increasing radii\n\nThis graph shows how many days it takes to leave a given area when the area is increasing in size.\n\n\n#convert to a projection\nprj_tuvu_7783 <- spTransform(move_tuvu_7783, center=T)\n\nprj_tuvu_7783 <- fpt(as(prj_tuvu_7783, \"ltraj\"), \n                 radii=10^seq(3, 6, length.out=150),\n                 units=\"days\")\n# calculate mean nb of days to leave each radii \nmeanFPT <- colMeans(prj_tuvu_7783[[1]], \n                    na.rm=T)\nradiiFPT <- attributes(prj_tuvu_7783)$radii\nplot(meanFPT~radiiFPT,\n     main=\"TUVU_7783\",\n     type=\"l\", \n     lwd=2, \n     xlab=\"Radii in meters\",\n     ylab=\"First passage time in days\", log=\"xy\")\n\n\n\n#as the radii increases in size, it takes the animal longer to leave the circle\n\n# variance of the log(FPT) #\nvars <- varlogfpt(prj_tuvu_7783, graph=F)\nplot(as.numeric(vars)~radiiFPT,\n     main=\"TUVU_7783\",\n     type=\"l\", \n     lwd=1, \n     lty=2, \n     log=\"x\", \n     ylab=\"Variance of log first passage time\", \n     xlab=\"Radius in meters\")\n\n\n\n\n\n\nFPT in Relation to Time\n\nFirst three graphs show how there are different slopes on the FPT vs Radii graph.\nThe last graph shows how long it takes a bird to leave 4 different size radii over time.\n\nThe migration patterns can be seen in the largest radii.\n\nThe following code is very fancy and complex please visit Animove website for more info.\n\n\nplot(log10(meanFPT)~log10(radiiFPT),\n     main=\"TUVU_7783\",\n     type=\"l\", \n     lwd=2, \n     xlab=\"Log radii in meters\",\n     ylab=\"Log first passage time in days\")\nlm1 <- lm(log10(meanFPT[1:which.min(vars[1:which.max(vars)])])~\n            log10(radiiFPT[1:which.min(vars[1:which.max(vars)])]))\nlm2 <- lm(log10(meanFPT[which.min(vars[1:which.max(vars)]):which.max(vars)])~\n            log10(radiiFPT[which.min(vars[1:which.max(vars)]):which.max(vars)]))\nabline(lm1, lty=2)\nabline(lm2, lty=3)\ntext(4, 0.1, paste(signif(summary(lm1)$coefficients[2,1], 2), \n                   \"±\", \n                   signif(summary(lm1)$coefficients[2,2], 2)), pos=4, cex=0.75)\ntext(4, 1, paste(signif(summary(lm2)$coefficients[2,1], 2), \n                 \"±\", \n                 signif(summary(lm2)$coefficients[2,2], 2)), pos=4, cex=0.75)\n\n\n\n# breaks in the trend of the variance of log(fpt) \nplot(as.numeric(vars)~radiiFPT,\n     main=\"TUVU_7783\",\n     type=\"l\", lwd=1, lty=2, \n     ylab=\"Variance of log first passage time\", \n     xlab=\"Radius in meters\", log=\"x\")\nbreaks <- which(diff(floor(diff(as.numeric(vars))))==-1)+1\nabline(v=radiiFPT[breaks])\n\n\n\n# fitting LM to all changes in slope of variance of log(fpt) ##\nplot(log10(meanFPT)~log10(radiiFPT),\n     main=\"TUVU_7783\",\n     type=\"n\", lwd=4, xlab=\"Log radii in meters\",\n     ylab=\"Log first passage time in days\")\n\nlm1 <- lm(log10(meanFPT[1:breaks[1]])~log10(radiiFPT[1:breaks[1]]))\nlm2 <- lm(log10(meanFPT[breaks[1]:breaks[2]])~log10(radiiFPT[breaks[1]:breaks[2]]))\nlm3 <- lm(log10(meanFPT[breaks[2]:breaks[3]])~log10(radiiFPT[breaks[2]:breaks[3]]))\nlm4 <- lm(log10(meanFPT[breaks[3]:breaks[4]])~log10(radiiFPT[breaks[3]:breaks[4]]))\nlm5 <- lm(log10(meanFPT[breaks[4]:length(as.numeric(vars))])~log10(radiiFPT[breaks[4]:length(as.numeric(vars))]))\n\nabline(lm1, lty=2, lwd=1 + summary(lm1)$coefficient[2,1], col=alpha(\"black\", 0.8))\nabline(lm2, lty=2, lwd=1 + summary(lm2)$coefficient[2,1], col=alpha(\"black\", 0.8))\nabline(lm3, lty=2, lwd=1 + summary(lm3)$coefficient[2,1], col=alpha(\"black\", 0.8))\nabline(lm4, lty=2, lwd=1 + summary(lm4)$coefficient[2,1], col=alpha(\"black\", 0.8))\nabline(lm5, lty=2, lwd=1 + summary(lm5)$coefficient[2,1], col=alpha(\"black\", 0.8))\n\nlines(log10(meanFPT)~log10(radiiFPT),type=\"l\", lwd=4, col=alpha(\"grey40\", 0.8))\nlegend(\"bottomright\",title=\"Radii (m)\", lty=c(2,2,2,2,2), \n       lwd=signif(c(1+summary(lm1)$coefficient[2,1],\n                    1+summary(lm2)$coefficient[2,1],\n                    1+summary(lm3)$coefficient[2,1],\n                    1+summary(lm4)$coefficient[2,1],\n                    1+summary(lm5)$coefficient[2,1]),2),\n       c(paste(c(1000, round(radiiFPT[breaks],0))[1:2], collapse=\" - \"),\n         paste(c(1000, round(radiiFPT[breaks],0))[2:3], collapse=\" - \"),\n         paste(c(1000, round(radiiFPT[breaks],0))[3:4], collapse=\" - \"),\n         paste(c(1000, round(radiiFPT[breaks],0))[4:5], collapse=\" - \"),\n         paste(c(round(radiiFPT[breaks],0)[4], 100000), collapse=\" - \")),\n         bty=\"n\", cex=0.75)\n\n\n\n# FPT at the 4 different scales\npar(mfrow=c(2,2))\nfor(i in 4:1){\n  plot(prj_tuvu_7783[[1]][,breaks[i]]~ move_tuvu_7783@timestamps, \n       type=\"n\",\n       xlab=\"Time\", \n       ylab=\"FPT (days)\",\n       main= paste(\"TUVU_7783 Radius\", \n       round(radiiFPT[breaks[i]],0), \"meters\"),\n       bty=\"n\")\n  points(prj_tuvu_7783[[1]][,breaks[i]]~ move_tuvu_7783@timestamps, \n         pch=16, \n         col=alpha(\"grey\", 0.1))\n  lines(prj_tuvu_7783[[1]][,breaks[i]]~ move_tuvu_7783@timestamps)}\n\n\n\npar(mfrow=c(1,1))"
  },
  {
    "objectID": "index.html#circular-visuals",
    "href": "index.html#circular-visuals",
    "title": "Visualization of Movement Data",
    "section": "Circular Visuals",
    "text": "Circular Visuals\n\nCreating azimuth\n\nAzimuth is needed to create a circular visualization of the data.\n\n\n#Filter out days before 2022\ntuvu_7783_22<-filter(tuvu_7783, DateTime>'2022-01-01 00:00:00')\n\n#filter out days after 2022\ntuvu_7783_22<-filter(tuvu_7783_22, DateTime<'2023-01-01 00:00:00')\n\n#convert to Data.frame\nmove_tuvu_7783_22<- methods::as(tuvu_7783_22, \n                             \"data.frame\")\n\n#convert to move\nmove_tuvu_7783_22 <- df2move(move_tuvu_7783_22, \n                          proj = \"+proj=longlat +datum=WGS84 +no_defs\", \n                          time = \"DateTime\", \n                          x = \"lon\", \n                          y = \"lat\", \n                          track_id = \"id\",\n                          data = NULL )\n\n\nlibrary(circular)\n\n\nAttaching package: 'circular'\n\n\nThe following object is masked from 'package:ggmap':\n\n    wind\n\n\nThe following objects are masked from 'package:CircStats':\n\n    A1, A1inv, deg, I.0, I.1, I.p, pp.plot, rad, rose.diag, rstable\n\n\nThe following objects are masked from 'package:stats':\n\n    sd, var\n\n# store the information in a new data frame\nazimuth <- data.frame(D=angle(move_tuvu_7783_22),\n                      V=speed(move_tuvu_7783_22), \n                      Season=tuvu_7783_22$groups[-1])\n# Define the direction as a circular\nazimuth$Dcirc<-as.circular(azimuth$D, \n                 rotation=\"clock\", \n                 units=\"degrees\", \n                 type=\"angles\", \n                 modulo=\"asis\", \n                 zero=0, \n                 template=\"geographic\")\n# select segments above 2 m/s, we are only interested in segments when 7783 is moving.\nazimuth <- azimuth[azimuth$V>=2,]\n# remove missing values\nazimuth <- azimuth[complete.cases(azimuth),]\n# define a vector that is used to set the order of plotting\nseasons <- levels(tuvu_7783_22$groups)\n\n\n\nDirection of Travel\n\nIt can be seen that 7783 moves north during northern migration and south during southern migration.\n\n\n# change margins of plot\npar(mar=rep(1,4))\n# plot all the azimuths\nplot(azimuth$Dcirc, \n     main=\"TUVU_7783 Direction\",\n     stack=T, \n     shrink=1.6,\n     pch=16, \n     sep=0.05, \n     col=\"grey\")\n# loop through seasons and plot a line denisty per season\nfor(i in 1:length(seasons)){\n  # subset the azimuth\n  x <- azimuth[azimuth$Season==seasons[i],'Dcirc']\n  # calculate density and plot as a line\n  lines(density(x, \n                bw=180, \n                kernel=\"vonmises\"), \n        lwd=2, \n        lty=i)\n  # draw an arrow showing mean and resultant length\n  arrows.circular(mean(x), y=rho.circular(x), lwd=2, length=0.1, lty=i)\n}\n# add a legend\nlegend(\"bottomleft\", \n       lty=c(1,2,3,4), \n       seasons, \n       bty=\"n\", \n       cex=0.85)\n\n\n\n\n\n\nSpeed in relation to Direction\n\nAnother helpful visualization is to view the speed in relation to direction and season.\n\nIt can be seen the 7783 moves faster during migration.\n\n\n\n# speed ~ azimuth scatter plot #\nlibrary(scales)\nplot(speed(move_tuvu_7783_22)~angle(move_tuvu_7783_22),\n     main=\"TUVU_7783 Speed\",\n     ylab=\"Speed in m/s\", \n     xlab=\"Azimuth in degrees\", \n     type=\"n\", \n     bty=\"n\")\npoints(speed(move_tuvu_7783_22)~angle(move_tuvu_7783_22), ylim=c(0,20),\n     ylab=\"Speed in m/s\", \n     xlab=\"Azimuth in degrees\", \n     pch=16, \n     col=alpha(\"black\", 0.3))\n\n\n\n# wind rose of azimuth and speed per season\npar(list(mfrow=c(2,2)))\nfor(i in seasons){\n  windrose(x=azimuth[azimuth$Season==i,'Dcirc'], \n           y=azimuth[azimuth$Season==i,'V'],\n           main= i, \n           plot.mids=T, \n           cir.ind = 0.2, \n           mids.size=1, \n           increment=5, \n           bins=36, \n           fill.col=grey(seq(1,0, length.out=6)),\n           shrink=1.2)\n}\n\n\n\npar(mfrow=c(1,1))\n\n\n\nDetailed Migration Map\n\nThis is the same map created earlier with the colors representing the different seasons.\n\n\n#plot data\nggmap(m, color=groups)+\ngeom_path(data=tuvu_7783_22, \n          aes(x=lon, \n              y=lat,\n              color=groups),\n              size=0.7)+\n  theme(text = element_text(size =13),\n        panel.grid.major.x = element_blank() ,\n        panel.grid.minor.x = element_blank())+\n  labs(y = \"Latitude\", \n       x = \"Longitude\")+\n  scale_color_manual(values = c(\"pink\", \"salmon\", \"turquoise4\", \"mediumorchid4\"))\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead."
  },
  {
    "objectID": "index.html#working-with-altitude",
    "href": "index.html#working-with-altitude",
    "title": "Visualization of Movement Data",
    "section": "Working With Altitude",
    "text": "Working With Altitude\n\nMutate Data to Fit Elevatr\n\nThe elevatr package needs to have the “lon” and “lat” in the front of the data set.\nThe geosphere package needs the to have only “lon” and “lat” in the data set.\n\n\n#upload package\nlibrary(elevatr)\n#rearange data set to make readable for elevator function\ndat_tuvu_relocate<-tuvu_7783_22 |> \n  relocate(lon, .before=id) |> \n  relocate(lat, .before=id) |> \n  relocate(DateTime, .before=id) |> \n  relocate(DateTime, .before=id) |> \n  drop_na(lat)\n\n#convert into Data.frame\ndat_tuvu_relocate_df <- data.frame(dat_tuvu_relocate)\n\n\n\nDownload elevatr data\n\nelevatr will extract topographic data from AWS and create a raster. It then takes that raster and extracts the elevation of the land when given a specific coordinate.\n\n\n#get elevation points from coordinates\ndat_tuvu_with_ellip<- get_elev_point(dat_tuvu_relocate_df, \n                                     prj = \"+proj=longlat +datum=WGS84 +no_defs\", \n                                     src = \"aws\", \n                                     z=5)\n\nMosaicing & Projecting\n\n\nNote: Elevation units are in meters\n\n#create all outputs available\noptions(max.print = 1000000)\n\nglimpse(dat_tuvu_with_ellip)\n\nFormal class 'SpatialPointsDataFrame' [package \"sp\"] with 5 slots\n  ..@ data       :'data.frame': 24386 obs. of  28 variables:\n  .. ..$ DateTime           : POSIXct[1:24386], format: \"2022-01-01 12:31:04\" \"2022-01-01 13:30:56\" ...\n  .. ..$ id                 : num [1:24386] 8.95e+19 8.95e+19 8.95e+19 8.95e+19 8.95e+19 ...\n  .. ..$ GPS_date_YYYY.MM.DD: chr [1:24386] \"2022-01-01\" \"2022-01-01\" \"2022-01-01\" \"2022-01-01\" ...\n  .. ..$ GPS_utc_HH.MM.SS   : chr [1:24386] \"12:31:04\" \"13:30:56\" \"14:01:53\" \"15:01:58\" ...\n  .. ..$ hdop               : num [1:24386] 1.6 1.18 2.6 2.25 0.89 0.88 0.93 0.96 0.92 0.93 ...\n  .. ..$ qi                 : num [1:24386] 3 3 3 3 3 3 3 3 3 3 ...\n  .. ..$ cog                : int [1:24386] 0 0 0 0 0 246 152 45 196 11 ...\n  .. ..$ speed              : num [1:24386] 0.02 0.1 0.14 0.07 0.03 ...\n  .. ..$ alt                : num [1:24386] 139 132 70 100 111 137 128 240 173 201 ...\n  .. ..$ data_voltage       : num [1:24386] 4.17 4.16 4.16 4.16 4.16 4.16 4.16 4.16 4.16 4.16 ...\n  .. ..$ solar_charge       : num [1:24386] 0.03 2.27 4.97 4.95 4.93 5.62 5.58 4.81 5.83 5.96 ...\n  .. ..$ solar_current      : num [1:24386] 0 0 0 1 2 16 12 0 22 31 ...\n  .. ..$ nsats              : int [1:24386] 6 6 5 4 9 9 8 9 8 9 ...\n  .. ..$ vdop               : num [1:24386] 3.53 1.96 6.44 5 1.66 1.69 1.7 1.73 1.79 1.79 ...\n  .. ..$ activity           : int [1:24386] 0 0 56 73 43 59 25 4 0 0 ...\n  .. ..$ temperature        : num [1:24386] 29 26 23 29 33 33 32 30 28 28 ...\n  .. ..$ time_to_fix        : int [1:24386] 49 13 16 17 41 11 7 5 5 5 ...\n  .. ..$ pTime              : num [1:24386] 10.828 0.998 0.516 1.001 1.008 ...\n  .. ..$ sTime              : num [1:24386] 0.9978 0.5158 1.0014 1.0081 0.0706 ...\n  .. ..$ pDist              : num [1:24386] 0.0024 0.00974 0.05904 0.06594 0.01172 ...\n  .. ..$ sDist              : num [1:24386] 0.00974 0.05904 0.06594 0.01172 0.14195 ...\n  .. ..$ pSpeed             : num [1:24386] 0.000222 0.009762 0.114453 0.06585 0.01163 ...\n  .. ..$ sSpeed             : num [1:24386] 0.00976 0.11445 0.06585 0.01163 2.01188 ...\n  .. ..$ inAng              : num [1:24386] 65.96 94.67 109.79 59.17 5.09 ...\n  .. ..$ julian             : num [1:24386] 1 1 1 1 1 1 1 1 1 1 ...\n  .. ..$ groups             : Factor w/ 4 levels \"Wintering\",\"North migration\",..: 1 1 1 1 1 1 1 1 1 1 ...\n  .. ..$ elevation          : num [1:24386] 118 118 118 118 118 118 118 118 111 86 ...\n  .. ..$ elev_units         : chr [1:24386] \"meters\" \"meters\" \"meters\" \"meters\" ...\n  ..@ coords.nrs : num(0) \n  ..@ coords     : num [1:24386, 1:2] -106 -106 -106 -106 -106 ...\n  .. ..- attr(*, \"dimnames\")=List of 2\n  ..@ bbox       : num [1:2, 1:2] -121.3 20 -105 38.7\n  .. ..- attr(*, \"dimnames\")=List of 2\n  ..@ proj4string:Formal class 'CRS' [package \"sp\"] with 1 slot\n\n\n\n\nCalculate Elevation above Ground Level\n\nSubtract the elevation of the land from the altitude to obtain the elevation above ground level.\n\n\n#converting ellipsoidal heights to orthometric heights\ndat_tuvu_with_ellip$eagl<-dat_tuvu_with_ellip$alt-dat_tuvu_with_ellip$elevation\n\n#convert spacial data frame into normal data frame\ndat_tuvu_with_eagl<- as.data.frame(dat_tuvu_with_ellip)\n\nglimpse(dat_tuvu_with_eagl)\n\nRows: 24,386\nColumns: 31\n$ DateTime            <dttm> 2022-01-01 12:31:04, 2022-01-01 13:30:56, 2022-01…\n$ id                  <dbl> 8.94608e+19, 8.94608e+19, 8.94608e+19, 8.94608e+19…\n$ GPS_date_YYYY.MM.DD <chr> \"2022-01-01\", \"2022-01-01\", \"2022-01-01\", \"2022-01…\n$ GPS_utc_HH.MM.SS    <chr> \"12:31:04\", \"13:30:56\", \"14:01:53\", \"15:01:58\", \"1…\n$ hdop                <dbl> 1.60, 1.18, 2.60, 2.25, 0.89, 0.88, 0.93, 0.96, 0.…\n$ qi                  <dbl> 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,…\n$ cog                 <int> 0, 0, 0, 0, 0, 246, 152, 45, 196, 11, 179, 15, 198…\n$ speed               <dbl> 0.02, 0.10, 0.14, 0.07, 0.03, 11.15, 14.32, 18.21,…\n$ alt                 <dbl> 139, 132, 70, 100, 111, 137, 128, 240, 173, 201, 1…\n$ data_voltage        <dbl> 4.17, 4.16, 4.16, 4.16, 4.16, 4.16, 4.16, 4.16, 4.…\n$ solar_charge        <dbl> 0.03, 2.27, 4.97, 4.95, 4.93, 5.62, 5.58, 4.81, 5.…\n$ solar_current       <dbl> 0, 0, 0, 1, 2, 16, 12, 0, 22, 31, 26, 29, 24, 16, …\n$ nsats               <int> 6, 6, 5, 4, 9, 9, 8, 9, 8, 9, 9, 9, 9, 9, 7, 9, 7,…\n$ vdop                <dbl> 3.53, 1.96, 6.44, 5.00, 1.66, 1.69, 1.70, 1.73, 1.…\n$ activity            <int> 0, 0, 56, 73, 43, 59, 25, 4, 0, 0, 0, 0, 0, 0, 106…\n$ temperature         <dbl> 29, 26, 23, 29, 33, 33, 32, 30, 28, 28, 27, 27, 27…\n$ time_to_fix         <int> 49, 13, 16, 17, 41, 11, 7, 5, 5, 5, 5, 5, 6, 5, 6,…\n$ pTime               <dbl> 10.82833333, 0.99777778, 0.51583333, 1.00138889, 1…\n$ sTime               <dbl> 0.99777778, 0.51583333, 1.00138889, 1.00805556, 0.…\n$ pDist               <dbl> 0.002401264, 0.009740193, 0.059038624, 0.065941633…\n$ sDist               <dbl> 0.009740193, 0.059038624, 0.065941633, 0.011724095…\n$ pSpeed              <dbl> 2.217575e-04, 9.761886e-03, 1.144529e-01, 6.585017…\n$ sSpeed              <dbl> 0.009761886, 0.114452905, 0.065850174, 0.011630406…\n$ inAng               <dbl> 65.963850, 94.667188, 109.790366, 59.174138, 5.089…\n$ julian              <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ groups              <fct> Wintering, Wintering, Wintering, Wintering, Winter…\n$ elevation           <dbl> 118, 118, 118, 118, 118, 118, 118, 118, 111, 86, 8…\n$ elev_units          <chr> \"meters\", \"meters\", \"meters\", \"meters\", \"meters\", …\n$ eagl                <dbl> 21, 14, -48, -18, -7, 19, 10, 122, 62, 115, 75, 17…\n$ coords.x1           <dbl> -105.5184, -105.5183, -105.5188, -105.5193, -105.5…\n$ coords.x2           <dbl> 20.12981, 20.12973, 20.12947, 20.12987, 20.12990, …\n\n\n\n\nApply Filters\n\nhdop is the horizontal dilution of precision, and vdop is vertical dilution of precision\n\nThis tells us how accurate the data collected was based off the position and precision of satellites.\nAcceptable values are anything below 3.\n\nTime to fix indicates the ammount of time taken to acquire a satellite signal, navigate, and calculate data.\nTo visualize negative points filter out any altitude greater than 0.1 (only do to visualize negative do not include in final graph.\n\n\n#filter data with HDOP greater than 5\ndat_tuvu_with_eagl_f <- filter(dat_tuvu_with_eagl, hdop<5)\n\n#filter data with vDOP greater than 5\ndat_tuvu_with_eagl_f<- filter(dat_tuvu_with_eagl_f, vdop<5)\n\nglimpse(dat_tuvu_with_eagl_f)\n\nRows: 23,969\nColumns: 31\n$ DateTime            <dttm> 2022-01-01 12:31:04, 2022-01-01 13:30:56, 2022-01…\n$ id                  <dbl> 8.94608e+19, 8.94608e+19, 8.94608e+19, 8.94608e+19…\n$ GPS_date_YYYY.MM.DD <chr> \"2022-01-01\", \"2022-01-01\", \"2022-01-01\", \"2022-01…\n$ GPS_utc_HH.MM.SS    <chr> \"12:31:04\", \"13:30:56\", \"16:02:27\", \"16:06:41\", \"1…\n$ hdop                <dbl> 1.60, 1.18, 0.89, 0.88, 0.93, 0.96, 0.92, 0.93, 0.…\n$ qi                  <dbl> 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,…\n$ cog                 <int> 0, 0, 0, 246, 152, 45, 196, 11, 179, 15, 198, 346,…\n$ speed               <dbl> 0.02, 0.10, 0.03, 11.15, 14.32, 18.21, 14.13, 20.9…\n$ alt                 <dbl> 139, 132, 111, 137, 128, 240, 173, 201, 161, 182, …\n$ data_voltage        <dbl> 4.17, 4.16, 4.16, 4.16, 4.16, 4.16, 4.16, 4.16, 4.…\n$ solar_charge        <dbl> 0.03, 2.27, 4.93, 5.62, 5.58, 4.81, 5.83, 5.96, 5.…\n$ solar_current       <dbl> 0, 0, 2, 16, 12, 0, 22, 31, 26, 29, 24, 16, 7, 18,…\n$ nsats               <int> 6, 6, 9, 9, 8, 9, 8, 9, 9, 9, 9, 9, 7, 9, 7, 8, 8,…\n$ vdop                <dbl> 3.53, 1.96, 1.66, 1.69, 1.70, 1.73, 1.79, 1.79, 1.…\n$ activity            <int> 0, 0, 43, 59, 25, 4, 0, 0, 0, 0, 0, 0, 106, 480, 3…\n$ temperature         <dbl> 29, 26, 33, 33, 32, 30, 28, 28, 27, 27, 27, 26, 28…\n$ time_to_fix         <int> 49, 13, 41, 11, 7, 5, 5, 5, 5, 5, 6, 5, 6, 5, 8, 9…\n$ pTime               <dbl> 10.82833333, 0.99777778, 1.00805556, 0.07055556, 0…\n$ sTime               <dbl> 0.99777778, 0.51583333, 0.07055556, 0.01083333, 0.…\n$ pDist               <dbl> 0.002401264, 0.009740193, 0.011724095, 0.141949294…\n$ sDist               <dbl> 0.009740193, 0.059038624, 0.141949294, 0.151631888…\n$ pSpeed              <dbl> 2.217575e-04, 9.761886e-03, 1.163041e-02, 2.011880…\n$ sSpeed              <dbl> 0.009761886, 0.114452905, 2.011879751, 13.99678964…\n$ inAng               <dbl> 65.963850, 94.667188, 5.089779, 177.749387, 37.696…\n$ julian              <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ groups              <fct> Wintering, Wintering, Wintering, Wintering, Winter…\n$ elevation           <dbl> 118, 118, 118, 118, 118, 118, 111, 86, 86, 7, 53, …\n$ elev_units          <chr> \"meters\", \"meters\", \"meters\", \"meters\", \"meters\", …\n$ eagl                <dbl> 21, 14, -7, 19, 10, 122, 62, 115, 75, 175, 367, 82…\n$ coords.x1           <dbl> -105.5184, -105.5183, -105.5192, -105.5205, -105.5…\n$ coords.x2           <dbl> 20.12981, 20.12973, 20.12990, 20.12962, 20.12927, …\n\n#filter out time to fix less greater than 60\ndat_tuvu_with_eagl_f<- filter(dat_tuvu_with_eagl_f, time_to_fix<60)\n\nglimpse(dat_tuvu_with_eagl_f)\n\nRows: 23,854\nColumns: 31\n$ DateTime            <dttm> 2022-01-01 12:31:04, 2022-01-01 13:30:56, 2022-01…\n$ id                  <dbl> 8.94608e+19, 8.94608e+19, 8.94608e+19, 8.94608e+19…\n$ GPS_date_YYYY.MM.DD <chr> \"2022-01-01\", \"2022-01-01\", \"2022-01-01\", \"2022-01…\n$ GPS_utc_HH.MM.SS    <chr> \"12:31:04\", \"13:30:56\", \"16:02:27\", \"16:06:41\", \"1…\n$ hdop                <dbl> 1.60, 1.18, 0.89, 0.88, 0.93, 0.96, 0.92, 0.93, 0.…\n$ qi                  <dbl> 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,…\n$ cog                 <int> 0, 0, 0, 246, 152, 45, 196, 11, 179, 15, 198, 346,…\n$ speed               <dbl> 0.02, 0.10, 0.03, 11.15, 14.32, 18.21, 14.13, 20.9…\n$ alt                 <dbl> 139, 132, 111, 137, 128, 240, 173, 201, 161, 182, …\n$ data_voltage        <dbl> 4.17, 4.16, 4.16, 4.16, 4.16, 4.16, 4.16, 4.16, 4.…\n$ solar_charge        <dbl> 0.03, 2.27, 4.93, 5.62, 5.58, 4.81, 5.83, 5.96, 5.…\n$ solar_current       <dbl> 0, 0, 2, 16, 12, 0, 22, 31, 26, 29, 24, 16, 7, 18,…\n$ nsats               <int> 6, 6, 9, 9, 8, 9, 8, 9, 9, 9, 9, 9, 7, 9, 7, 8, 8,…\n$ vdop                <dbl> 3.53, 1.96, 1.66, 1.69, 1.70, 1.73, 1.79, 1.79, 1.…\n$ activity            <int> 0, 0, 43, 59, 25, 4, 0, 0, 0, 0, 0, 0, 106, 480, 3…\n$ temperature         <dbl> 29, 26, 33, 33, 32, 30, 28, 28, 27, 27, 27, 26, 28…\n$ time_to_fix         <int> 49, 13, 41, 11, 7, 5, 5, 5, 5, 5, 6, 5, 6, 5, 8, 9…\n$ pTime               <dbl> 10.82833333, 0.99777778, 1.00805556, 0.07055556, 0…\n$ sTime               <dbl> 0.99777778, 0.51583333, 0.07055556, 0.01083333, 0.…\n$ pDist               <dbl> 0.002401264, 0.009740193, 0.011724095, 0.141949294…\n$ sDist               <dbl> 0.009740193, 0.059038624, 0.141949294, 0.151631888…\n$ pSpeed              <dbl> 2.217575e-04, 9.761886e-03, 1.163041e-02, 2.011880…\n$ sSpeed              <dbl> 0.009761886, 0.114452905, 2.011879751, 13.99678964…\n$ inAng               <dbl> 65.963850, 94.667188, 5.089779, 177.749387, 37.696…\n$ julian              <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ groups              <fct> Wintering, Wintering, Wintering, Wintering, Winter…\n$ elevation           <dbl> 118, 118, 118, 118, 118, 118, 111, 86, 86, 7, 53, …\n$ elev_units          <chr> \"meters\", \"meters\", \"meters\", \"meters\", \"meters\", …\n$ eagl                <dbl> 21, 14, -7, 19, 10, 122, 62, 115, 75, 175, 367, 82…\n$ coords.x1           <dbl> -105.5184, -105.5183, -105.5192, -105.5205, -105.5…\n$ coords.x2           <dbl> 20.12981, 20.12973, 20.12990, 20.12962, 20.12927, …\n\n#remove negative points\ndat_tuvu_with_eagl_fp<- filter(dat_tuvu_with_eagl_f, eagl>(-0.1))\n#filter out on the ground\ndat_tuvu_with_eagl_fs<- filter(dat_tuvu_with_eagl_f, speed>1)\n\n#filter out negative points\ndat_tuvu_with_eagl_fn<- filter(dat_tuvu_with_eagl_f, eagl<(0))\ndat_tuvu_with_eagl_fsn<- filter(dat_tuvu_with_eagl_fs, eagl<(0))\n\n\nglimpse(dat_tuvu_with_eagl_f)\n\nRows: 23,854\nColumns: 31\n$ DateTime            <dttm> 2022-01-01 12:31:04, 2022-01-01 13:30:56, 2022-01…\n$ id                  <dbl> 8.94608e+19, 8.94608e+19, 8.94608e+19, 8.94608e+19…\n$ GPS_date_YYYY.MM.DD <chr> \"2022-01-01\", \"2022-01-01\", \"2022-01-01\", \"2022-01…\n$ GPS_utc_HH.MM.SS    <chr> \"12:31:04\", \"13:30:56\", \"16:02:27\", \"16:06:41\", \"1…\n$ hdop                <dbl> 1.60, 1.18, 0.89, 0.88, 0.93, 0.96, 0.92, 0.93, 0.…\n$ qi                  <dbl> 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,…\n$ cog                 <int> 0, 0, 0, 246, 152, 45, 196, 11, 179, 15, 198, 346,…\n$ speed               <dbl> 0.02, 0.10, 0.03, 11.15, 14.32, 18.21, 14.13, 20.9…\n$ alt                 <dbl> 139, 132, 111, 137, 128, 240, 173, 201, 161, 182, …\n$ data_voltage        <dbl> 4.17, 4.16, 4.16, 4.16, 4.16, 4.16, 4.16, 4.16, 4.…\n$ solar_charge        <dbl> 0.03, 2.27, 4.93, 5.62, 5.58, 4.81, 5.83, 5.96, 5.…\n$ solar_current       <dbl> 0, 0, 2, 16, 12, 0, 22, 31, 26, 29, 24, 16, 7, 18,…\n$ nsats               <int> 6, 6, 9, 9, 8, 9, 8, 9, 9, 9, 9, 9, 7, 9, 7, 8, 8,…\n$ vdop                <dbl> 3.53, 1.96, 1.66, 1.69, 1.70, 1.73, 1.79, 1.79, 1.…\n$ activity            <int> 0, 0, 43, 59, 25, 4, 0, 0, 0, 0, 0, 0, 106, 480, 3…\n$ temperature         <dbl> 29, 26, 33, 33, 32, 30, 28, 28, 27, 27, 27, 26, 28…\n$ time_to_fix         <int> 49, 13, 41, 11, 7, 5, 5, 5, 5, 5, 6, 5, 6, 5, 8, 9…\n$ pTime               <dbl> 10.82833333, 0.99777778, 1.00805556, 0.07055556, 0…\n$ sTime               <dbl> 0.99777778, 0.51583333, 0.07055556, 0.01083333, 0.…\n$ pDist               <dbl> 0.002401264, 0.009740193, 0.011724095, 0.141949294…\n$ sDist               <dbl> 0.009740193, 0.059038624, 0.141949294, 0.151631888…\n$ pSpeed              <dbl> 2.217575e-04, 9.761886e-03, 1.163041e-02, 2.011880…\n$ sSpeed              <dbl> 0.009761886, 0.114452905, 2.011879751, 13.99678964…\n$ inAng               <dbl> 65.963850, 94.667188, 5.089779, 177.749387, 37.696…\n$ julian              <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ groups              <fct> Wintering, Wintering, Wintering, Wintering, Winter…\n$ elevation           <dbl> 118, 118, 118, 118, 118, 118, 111, 86, 86, 7, 53, …\n$ elev_units          <chr> \"meters\", \"meters\", \"meters\", \"meters\", \"meters\", …\n$ eagl                <dbl> 21, 14, -7, 19, 10, 122, 62, 115, 75, 175, 367, 82…\n$ coords.x1           <dbl> -105.5184, -105.5183, -105.5192, -105.5205, -105.5…\n$ coords.x2           <dbl> 20.12981, 20.12973, 20.12990, 20.12962, 20.12927, …\n\n\n\n\nCreate ggplot Visuals\n\nlibrary(patchwork)\n\n\nAttaching package: 'patchwork'\n\n\nThe following object is masked from 'package:MASS':\n\n    area\n\n\nThe following object is masked from 'package:raster':\n\n    area\n\n#histogram of all values\np3<-ggplot(dat_tuvu_with_eagl_f, \n           aes(x = eagl)) +\n  geom_histogram(fill=\"black\",\n                 binwidth = 100, \n                 size=1) +\n  ggtitle(\"TUVU EAGL (100m binwidth)\")+\n  labs( x=\"Elevation Above Ground Level (m)\")+\n  theme(text = element_text(size =18))\n\n#histogram of negative values\nggplot(dat_tuvu_with_eagl_fn, aes(x = eagl)) +\n  geom_histogram(color=\"red\", \n                 fill=\"black\",\n                 binwidth = 10, \n                 size=1) +\n  ggtitle(\"TUVU EAGL negative points (10m binwidth)\")+\n  theme(text = element_text(size =18))\n\n\n\n#histogram of when speed is filtered \np4<-ggplot(dat_tuvu_with_eagl_fs, \n           aes(x = eagl)) +\n  geom_histogram(fill=\"black\",\n                 binwidth = 100,\n                 size=1) +\n  ggtitle(\"TUVU EAGL with Speed Greater than 1 (100m binwidth)\")+\n  labs( x=\"Elevation Above Ground Level (m)\")+\n  theme(text = element_text(size =18))\n\n#histogram of negative points when speed is filtered\nggplot(dat_tuvu_with_eagl_fsn, \n       aes(x = eagl)) +\n  geom_histogram(color=\"red\", \n                 fill=\"black\",\n                 binwidth = 10, \n                 size=1) +\n  ggtitle(\"TUVU EAGL with Speed Greater than 1 negaitve points (10m binwidth)\")+\n  theme(text = element_text(size =18))\n\n\n\n#use patchwork to combine them together\np3/p4\n\n\n\ndat_tuvu_with_eagl_fp$DateAndTime <- as.Date(dat_tuvu_with_eagl_fp$DateTime, tz = \"UTC\", origin = '2021-03-29')\n\n#scatter plot of time vs altitude\np1<-ggplot(dat_tuvu_with_eagl_fp, \n           aes(x = DateAndTime, y = eagl)) +\n  geom_point()+\n  scale_x_date(date_breaks = \"1 month\", \n               date_labels = \"%y-%j\")+\n  theme(axis.text.x = element_text(angle=90, \n                                   vjust=.5, \n                                   hjust=1), \n        text = element_text(size =15), \n        panel.grid.major.x = element_blank() ,\n        panel.grid.minor.x = element_blank())+\n  labs(title = \"TUVU EAGL\", \n       y = \"Elevation Above Ground Level (m)\", \n       x = \"Time Stamp\")\n\ntuvu_7783_22$DateAndTime <- as.Date(tuvu_7783_22$DateTime,\n                                 tz = \"UTC\", \n                                 origin = '2022-01-01')\n\n#scatter plot of time vs altitude with raw data\np2<-ggplot(tuvu_7783_22, aes(x = DateAndTime, y = alt)) +\n  geom_point()+\n  scale_x_date(date_breaks = \"1 month\", \n               date_labels = \"%y-%j\")+\n  theme(axis.text.x = element_text(angle=90, \n                                   vjust=.5, \n                                   hjust=1), \n        text = element_text(size =15), \n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank())+\n  labs(title = \"TUVU Altitude No Filters\", \n       y = \"Altitude (m)\", \n       x = \"Time Stamp\")\n\n#use patchwork to combine\np2/p1"
  }
]